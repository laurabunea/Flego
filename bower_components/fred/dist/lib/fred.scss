// ============================================================================
// FRED
// ============================================================================
//
// Friendly front-end framework.
//
// Made by Springload
//
// With guest appearances from Inuit.css, Twitter Bootstrap and Foundation


// ----------------------------------------------------------------------------
// Typography
// ----------------------------------------------------------------------------

$sans-serif-stack:              'Open Sans', sans-serif;
$serif-stack:                   "georgia", serif;

$font-primary:                   $sans-serif-stack;

// These variables are used to describe the font-family you want to serve
// to IE8 and other detestable browers that don't entirely support
// fonts with more than four variations. 
$font-primary-light:             $sans-serif-stack;
$font-primary-light-italic:      $sans-serif-stack;    
$font-primary-italic:            $sans-serif-stack;
$font-primary-bold:              $sans-serif-stack;
$font-primary-bold-italic:       $sans-serif-stack;

//font-weights
$primary-font-weight:                      400;
$primary-font-weight--light:               300;
$primary-font-weight--bold:                600;

// Specify some font sizes to get your project rolling. These are predominantly
// used by _typography.scss and _forms.scss

$font-size-xxxxl:               72;     //h0
$font-size-xxxl:                36;     //h1
$font-size-xxl:                 32;     //h2
$font-size-xl:                  22;     //h3
$font-size-l:                   20;     //h4
$font-size-m:                   18;     //h5
$font-size-s:                   16;     //h6 & .intro
$font-size-xs:                  14;     //p
$font-size-xxs:                 12;     //.small
$font-size-xxxs:                11;     //.tiny

$base-line-height:              1.428571429; // 20/14

$line-height-xxxxl:               1;                //h0
$line-height-xxxl:                1;                //h1
$line-height-xxl:                 1.2;              //h2
$line-height-xl:                  1.2;              //h3
$line-height-l:                   1.33333333;       //h4
$line-height-m:                   1.2;              //h5
$line-height-s:                   1.2;              //h6 & .intro
$line-height-xs:                  1.5;              //p
$line-height-xxs:                 1.4;              //.small
$line-height-xxxs:                1.4;              //.tiny


// ----------------------------------------------------------------------------
// Spacing
// ----------------------------------------------------------------------------

// Everything inherits from the base spacing unit. Pick this number wisely. 
// It should probably relate somehow to your line-height;

$base-spacing:                  24;
$base-spacing-unit:             1.5em;


// Compute a range of expansions to the base spacing, to use in our mixins:

$bs-0:                         0;
$bs-xxxs:                      $base-spacing-unit / 4;     // 6px
$bs-xxs:                       $base-spacing-unit / 3;     // 8px
$bs-xs:                        $base-spacing-unit / 2;     // 12px
$bs-s:                         $base-spacing-unit / 1.5;   // 16px
$bs-m:                         $base-spacing-unit;         // 24px
$bs-l:                         $base-spacing-unit * 1.5;   // 36px
$bs-xl:                        $base-spacing-unit * 2;     // 48px
$bs-xxl:                       $base-spacing-unit * 3;     // 72px
$bs-xxxl:                      $base-spacing-unit * 4;     // 96px

$base-spacing--xs:  $base-spacing / 2;

// Build some SaSS lists of our spacing classes, and map them to 
// a consistent set of class modifiers so that anything we size
// has a consistent naming convention:

$sizePrefixes:
    "-0",
    "-xxxs",
    "-xxs",
    "-xs",
    "-s",
    "-m",
    "-l",
    "-xl",
    "-xxl",
    "-xxxl";

$sizes:
    $bs-0, $bs-xxxs, $bs-xxs, $bs-xs, $bs-s, $bs-m, $bs-l, $bs-xl, $bs-xxl, $bs-xxxl;


// -----------------------------------------------------------------------------
// Blocks
// -----------------------------------------------------------------------------
/* 
* The block prefixes need to match up with the $block sizes below otherwise the 
* array will through an error or we could create an argument and pass in size 
prefixes and minus the ones we dont need eg block-0 hmmm 
*/

$blockPrefixes:
    "-xxxs",
    "-xxs",
    "-xs",
    "-s",
    "-m",
    "-l",
    "-xl",
    "-xxl",
    "-xxxl";

$block-xxxs:                   $bs-xxxs $bs-xxxs;        // 6px 6px
$block-xxs:                    $bs-xxxs $bs-xxs;         // 6px 8px
$block-xs:                     $bs-xxs $bs-xs;           // 8px 12px
$block-s:                      $bs-xs $bs-s;             // 12px 16px
$block-m:                      $bs-m $bs-m;              // 24px 24px
$block-l:                      $bs-l $bs-l;              // 36px 36px
$block-xl:                     $bs-l $bs-xl;             // 36px 48px
$block-xxl:                    $bs-xl $bs-xxl;           // 48px 72px
$block-xxxl:                   $bs-xxl $bs-xxxl;         // 72px 96px

$blockSizes:
    $block-xxxs,
    $block-xxs,
    $block-xs,
    $block-s,
    $block-m,
    $block-l,
    $block-xl,
    $block-xxl,
    $block-xxxl;


// -----------------------------------------------------------------------------
// Media queries
// -----------------------------------------------------------------------------

// General approach to media queries:
// - Assume `no media` as the first query.
// - The `small` breakpoint just gets @media only screen { @content }
// - `small-only` applies a max-width to prevent an upward cascade.
//
// Sizing guide:
//
// xsmall       | small mobiles, fridges, watches etc
// small        | mobiles, some internet-of-things displays
// medium       | tablet devices, netbooks, mobiles in landscape
// large        | screens > 960px
// xlarge       | wide screen devices > 1200px
// xxlarge      | in our experience, things need adjusting > 1440px
// xxxlarge     | Full HD

$breakpoint-none:"";
$breakpoint-xxlarge-name: "xxlarge";
$breakpoint-xlarge-name: "xlarge";
$breakpoint-large-name: "large";
$breakpoint-medium-name: "medium";
$breakpoint-small-name: "small";
$breakpoint-classname-prefix: "--q-";

// Set media queries in ems. If you're wondering, we remove 0.01em
// from the next breakpoint up, so that the breakpoints don't
// overlap. For instance:
//
// @media only screen and (max-width: 47.99em);
// @media only screen and (min-width: 48em);

$breakpoint-xsmall:     25em;   // The mighty LG Android!
$breakpoint-small:      30em;   // Portrait regular mobiles//480px
$breakpoint-small-max:  47.99em;
$breakpoint-medium:     48em;   // Skinny 768px
$breakpoint-medium-max: 59.99em;
$breakpoint-large:      60em;   // Desktop 960px
$breakpoint-large-max:  74.99em;
$breakpoint-xlarge:     75em;   // Wide 1200px
$breakpoint-xxlarge:    90em;   // Wide 1440px
$breakpoint-xxxlarge:   120em;  // Full HD

$breakpoints:
        (
            small "only screen"
        ),
        (
            small-only "only screen and (max-width: #{$breakpoint-small-max})"
        ),
        (
            medium "only screen and (min-width: #{$breakpoint-medium})"
        ),
        (
            medium-only "only screen and (min-width: #{$breakpoint-medium}) and (max-width: #{$breakpoint-medium-max})"
        ),
        (
            medium-down "only screen and (max-width: #{$breakpoint-medium})"
        ),
        (
            large "only screen and (min-width: #{$breakpoint-large})"
        ),
        (
            large-only "only screen and (min-width: #{$breakpoint-large}) and (max-width: #{$breakpoint-large-max})"
        ),
        (
            xlarge "only screen and (min-width: #{$breakpoint-xlarge})"
        ),
        (
            screen "only screen"
        ),
        (
            landscape "only screen and (orientation: landscape)"
        ),
        (
            portrait "only screen and (orientation: portrait)"
        )
;

$testing: "";

// -----------------------------------------------------------------------------
// Grid
// -----------------------------------------------------------------------------

$fred-grid-breakpoints:     default, small, medium, large, xlarge;
$grid-column-name:          "col";
$grid-divisions:            3, 4, 5, 10;
$grid-float-padding:        1em; // false to disable.
$grid-number-columns:       1, 2, 3, 4, 5, 6, 8;

// -----------------------------------------------------------------------------
// Fred module config
// -----------------------------------------------------------------------------

// These instruct Fred on how to generate just the bits you want.

// Make a range of blocks for the given breakpoints
$fred-block-breakpoints: default, small, medium, large, xlarge;

// Generate margin classes for the given breakpoints
//
// mt   | margin-top
// mb   | margin-bottom
// mr   | margin-right
// ml   | margin-left

$fred-margin-breakpoints: default, small, medium, large, xlarge;
$fred-margin-types: "mt", "mb", "ml", "mr";

// Generate padding classes for the given breakpoints
//
// pt   | padding-top
// pb   | padding-bottom
// pr   | padding-right
// pl   | padding-left

$fred-padding-breakpoints: default, small, medium, large, xlarge;
$fred-padding-types: "pt", "pb", "pl", "pr";

// -----------------------------------------------------------------------------
// Colours
// -----------------------------------------------------------------------------

$bg-color:                      #EEEEEE;
$base-font-color:               #2E2F2B;
$hr-colour:                     #e5e5e5;

// Links
$base-link-color:               #2F72BA;
$base-link-hover-color:         darken($base-link-color, 15%);
$lits-block-color:              #ccc;
$sub-header:                    #999;

// Text emphasis colours
$text-success:                  #468847;
$text-warning:                  #c09853;
$text-danger:                   #b94a48;
$text-muted:                    #999;


// Pills, lozenges and badges
$pill-font-color:               #fff;
$pill-bg-color:                 #333;
$badge-font-color:              #fff;
$badge-bg-color:                #333;
$lozenge-radius:                .25em;


// Radii (set to false to disable)
$radius:            .3125em;
$radius-s:          .125em;
$radius-l:          .625em;
$radius-circle:     35em;

//blockquotes
$open-quote:    \201C;
$close-quote:   \201D;
$block-quote-indent:-0.6em;

// Breakpoints

@mixin media($breakpoint) {
    @if $breakpoint == "default" {
        @content;
    } @else {
        @each $query in $breakpoints {
            @if $breakpoint == nth($query, 1) {
                @media #{nth($query, 2)} {
                    @content;
                }
            }
        }
    }
}
// -----------------------------------------------------------------------------
// Mixins
// -----------------------------------------------------------------------------


// Vendor
// A lightweight way of vendor-prefixing things:
// @include vendor(transition, opacity 0.3s ease-out, margin-top 5s linear);

@mixin vendor($property, $value...){
    -webkit-#{$property}:$value;
       -moz-#{$property}:$value;
        -ms-#{$property}:$value;
         -o-#{$property}:$value;
            #{$property}:$value;
}


// Opacity
// ----------------------------------------------------------------------------

@mixin opacity($value) {
    $ieOpacity: 100 * $value;
    opacity: $value;
    filter: alpha(opacity=#{$ieOpacity});
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$ieOpacity})";
}


// Simple theme mixins
// ----------------------------------------------------------------------------

@mixin theme-block($bg-color, $txt-color, $border-color){
    background-color:$bg-color;
    color:$txt-color;
    border-color:$border-color;
}


// Sizing shortcuts
@mixin box-dimensions($height, $width){
    height: $height;
    width:  $width;
}

@mixin square($size){
    height: $size;
    width:  $size;
}

// Box sizing
@mixin box-sizing($boxmodel) {
  -webkit-box-sizing: $boxmodel;
     -moz-box-sizing: $boxmodel;
          box-sizing: $boxmodel;
}


// Mixins for forms
// ----------------------------------------------------------------------------

// Webkit-style focus
@mixin tab-focus() {
  // Default
  outline: thin dotted #333;
  // Webkit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}


// Normalise the approach to CSS placeholders.
// ----------------------------------------------------------------------------
// 1. Firefox 4-18
// 2. Firefox 19+
// 3. Internet Explorer 10+
// 4. Safari and Chrome

@mixin placeholder($color: $input-color-placeholder) {
  &:-moz-placeholder            { color: $color; } //[1]
  &::-moz-placeholder           { color: $color; } //[2]
  &:-ms-input-placeholder       { color: $color; } //[3]
  &::-webkit-input-placeholder  { color: $color; } //[4]
}

@mixin font($font-family, $font-weight , $font-style) {
  font-family: $font-family;
  font-weight: $font-weight;
  font-style: $font-style;
}

// font-size in px and rem units
@mixin font-size($size-in-px) {
    font-size: #{$size-in-px}px; font-size: pxrem($size-in-px);
}


// Translate pixels to (r)ems, given a base size.
// By default, assume the base size is 16px (body font size)
@function px-to-em($size, $context: 16) {
    @return #{($size / $context)}em;
}

@function pxem($size, $context: 16) {
    @return #{($size / $context)}em;
}

@function pxrem($size, $context: 16) {
    @return #{($size / $context)}rem;
}


// Make nice media query namespaces from the variables file
@function fred-prefixed-breakpoint($name) {
    @if $name == "default" {
        @return "";
    } @else {
        @return $breakpoint-classname-prefix + unquote($name);
    }
}

// Get property names
@function fred-property-by-shorthand($val) {
    @if $val == "mt" {
        @return "margin-top";
    }
    @if $val == "mb" {
        @return "margin-bottom";
    }
    @if $val == "mr" {
        @return "margin-right";
    }
    @if $val == "ml" {
        @return "margin-left";
    }
    @if $val == "pt" {
        @return "padding-top";
    }
    @if $val == "pb" {
        @return "padding-bottom";
    }
    @if $val == "pr" {
        @return "padding-right";
    }
    @if $val == "pl" {
        @return "padding-left";
    }
    @else {
        @return "padding";
    }
}

// Spacing helpers
@mixin fred-sizer($class: false, $sizePrefixes: false, $mediaQuery: false, $property: false, $array: false) {
    $index:1;
    @each $size in $sizePrefixes {
        $className: $class + $size;
        @if $mediaQuery {
            $className: $className + fred-prefixed-breakpoint($mediaQuery);
        }

        .#{$className} { #{$property}: nth($array, $index)  }
        $index: $index + 1;
    }
}

@mixin fred-breakpoint-sizer($breakpointList, $classList) {
    @each $size in $breakpointList {
        @if $size == "default" {
            @each $class in $classList {
                @include fred-sizer($class, $sizePrefixes, $size, fred-property-by-shorthand($class), $sizes);
            }
        } @else {
            @include media($size) {
                @each $class in $classList {
                    @include fred-sizer($class, $sizePrefixes, $size, fred-property-by-shorthand($class), $sizes);
                }
            }
        }
    }
}

@mixin linear-gradient($angle, $color-stops...) {
  $_angle-with-vendor-prefix: "";
  $_angle: "";
  @if $angle == "to top" or $angle == "bottom" {
    $_angle-with-vendor-prefix: bottom;
    $_angle: to top;
  } @else if $angle == "to right" or $angle == "left" {
    $_angle-with-vendor-prefix: left;
    $_angle: to right;
  } @else if $angle == "to bottom" or $angle == "top" {
    $_angle-with-vendor-prefix: top;
    $_angle: to bottom;
  } @else if $angle == "to left" or $angle == "right" {
    $_angle-with-vendor-prefix: right;
    $_angle: to left;
  } @else if $angle == "to top right" or $angle == "bottom left" {
    $_angle-with-vendor-prefix: bottom left;
    $_angle: to top right;
  } @else if $angle == "to bottom right" or $angle == "top left" {
    $_angle-with-vendor-prefix: top left;
    $_angle: to bottom right;
  } @else if $angle == "to bottom left" or $angle == "top right" {
    $_angle-with-vendor-prefix: top right;
    $_angle: to bottom left;
  } @else if $angle == "to top left" or $angle == "bottom right" {
    $_angle-with-vendor-prefix: bottom right;
    $_angle: to top left;
  } @else {
    $_angle-with-vendor-prefix: $angle % 360;
    $_angle: (90 - $angle) % 360;
  }
  background: -webkit-linear-gradient($_angle-with-vendor-prefix, $color-stops);
  background: -moz-linear-gradient($_angle-with-vendor-prefix, $color-stops);
  background: -o-linear-gradient($_angle-with-vendor-prefix, $color-stops);
  background: linear-gradient($_angle, $color-stops);
}
/**

# Meet Fred, the friendly front-end framework


Fred helps jump-start your front-end projects. He's a super flexible little guy with a 
nice grunt-powered CLI.

### How Fred Works

Fred aims to solve a classic front-end problem: sharing and re-using common components between
projects, while allowing each project to retain custom variables and configuration.

You include '_fred.scss' in your project, and customise its behavior in '_fred-theme.scss'. 
When there's an update to Fred, you can update it with a 'bower update' and get all the new
Fred goodness in your project right away, without losing your settings. 


## Getting started

One liner:

```bash
bower install fred && cp bower_components/Fred.scss/dist/lib/fred.scss path-to-sass-folder/lib/_fred.scss && cp bower_components/Fred.scss/dist/_fred-theme.scss path-to-sass-folder/_fred-theme.scss 
```

This should give you the following structure in your sass dir:

```
path-to-sass-folder/
    |--lib/
    |----_fred.scss
    |--_fred-theme.scss
    |--screen.scss (or whatever your main sass file is)
```

Now you can include Fred in your `screen.scss`:
```scss
// screen.scss
@include "lib/fred"


// Your stylesheet can now use Fred! 

.my-selector {
  @extend %antialiased;
}

.my-other-selector {
  @extend .mt-m--q-large;
}

You can customise your installation from within the fred directory. Here's a one-liner:

```bash
> cd bower_components/fred && npm install && grunt
```

...and follow the directions of your trained cabin crew:

```bash
> cd Fred.scss/
> grunt 
[?] Do you want to customise Fred's modules? (y/N)
[?] Which modules would you like to include? (Press <space> to select)
 ❯⬡ scss/objects/_arrows.scss
  ⬡ scss/objects/_badge.scss
  ⬡ scss/objects/_block-grid.scss
  ⬡ scss/objects/_blocks.scss
  ⬡ scss/objects/_breadcrumbs.scss
  ⬡ scss/objects/_button-group.scss
  ⬡ scss/objects/_buttons.scss
  ⬡ scss/objects/_caret.scss
  ⬡ scss/objects/_close.scss
  ⬡ scss/objects/_forms.scss
  ⬡ scss/objects/_grid.scss
  ⬡ scss/objects/_headings.scss
  ⬡ scss/objects/_icon-text.scss
  ⬡ scss/objects/_images.scss
  ⬡ scss/objects/_links.scss
  ⬡ scss/objects/_lists.scss
  ⬡ scss/objects/_media.scss
  ⬡ scss/objects/_nav.scss
  ⬡ scss/objects/_pagination.scss
  ⬡ scss/objects/_pills.scss
  ⬡ scss/objects/_radii.scss
  ⬡ scss/objects/_ratio.scss
  ⬡ scss/objects/_spacing.scss
  ⬡ scss/objects/_split.scss
  ⬡ scss/objects/_typography.scss
  ⬡ scss/objects/_visibility.scss
```

*/

@import "../_fred-theme.scss";


/**
---------------------------------------
# Customising Fred

Fred has a very small core, and a number of optional modules. By default, it includes all of them.

To change what's included, you can run `grunt` inside the Fred package that bower downloads for you.

Follow the instructions of your cabin crew and you'll be rocking your custom-built Fred in
no time.

```
> cd Fred.scss/
> grunt 
[?] Do you want to customise Fred's modules? (y/N)
[?] Which modules would you like to include? (Press <space> to select)
 ❯⬡ scss/objects/_arrows.scss
  ⬡ scss/objects/_badge.scss
  ⬡ scss/objects/_block-grid.scss
  ⬡ scss/objects/_blocks.scss
  ⬡ scss/objects/_breadcrumbs.scss
  ⬡ scss/objects/_button-group.scss
  ⬡ scss/objects/_buttons.scss
  ⬡ scss/objects/_caret.scss
  ⬡ scss/objects/_close.scss
  ⬡ scss/objects/_forms.scss
  ⬡ scss/objects/_grid.scss
  ⬡ scss/objects/_headings.scss
  ⬡ scss/objects/_icon-text.scss
  ⬡ scss/objects/_images.scss
  ⬡ scss/objects/_links.scss
  ⬡ scss/objects/_lists.scss
  ⬡ scss/objects/_media.scss
  ⬡ scss/objects/_nav.scss
  ⬡ scss/objects/_pagination.scss
  ⬡ scss/objects/_pills.scss
  ⬡ scss/objects/_radii.scss
  ⬡ scss/objects/_ratio.scss
  ⬡ scss/objects/_spacing.scss
  ⬡ scss/objects/_split.scss
  ⬡ scss/objects/_typography.scss
  ⬡ scss/objects/_visibility.scss
```

That's about all for how to work with Fred. Next, let's look at what it actually gives you.

----

## Core


### Making browsers behave
Fred includes most of [normalize.css](https://github.com/necolas/normalize.css) v2.1.3. 

You can read the documentation on the normalize site. 

----

*/

// ! normalize.css v2.1.3 | MIT License | git.io/normalize

//   ==========================================================================
//   HTML5 display definitions
//   ==========================================================================


// Correct `block` display not defined in IE 8/9.

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
    display: block;
}

// Correct `inline-block` display not defined in IE 8/9.

audio,
canvas,
video {
    display: inline-block;
}

//
// Prevent modern browsers from displaying `audio` without controls.
// Remove excess height in iOS 5 devices.
//

audio:not([controls]) {
    display: none;
    height: 0;
}

//
// Address `[hidden]` styling not present in IE 8/9.
// Hide the `template` element in IE, Safari, and Firefox < 22.
//

[hidden],
template {
    display: none;
}

// -----------------------------------------------------------------------------
// Base
// -----------------------------------------------------------------------------


// 1. Set default font family to sans-serif.
// 2. Prevent iOS text size adjust after orientation change, without disabling
//    user zoom.

html {
    -ms-text-size-adjust: 100%; /* 2 */
    -webkit-text-size-adjust: 100%; /* 2 */
}

// Remove default margin.

body {
    margin: 0;
}

// -----------------------------------------------------------------------------
// Links
// -----------------------------------------------------------------------------

// Remove the gray background color from active links in IE 10.

a {
    background: transparent;
}

// Address `outline` inconsistency between Chrome and other browsers.

a:focus {
    outline: thin dotted;
}

// Improve readability when focused and also mouse hovered in all browsers.

a:active,
a:hover {
    outline: 0;
}

// -----------------------------------------------------------------------------
// Typography
// -----------------------------------------------------------------------------

// Address variable `h1` font-size and margin within `section` and `article`
// contexts in Firefox 4+, Safari 5, and Chrome.

h1 {
    font-size: 2em;
    margin-bottom: 0;
}

// Address styling not present in IE 8/9, Safari 5, and Chrome.

abbr[title] {
    border-bottom: 1px dotted;
}

// Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.

b,
strong {
    font-weight: bold;
}

// Address styling not present in Safari 5 and Chrome.

dfn {
    font-style: italic;
}

// Address differences between Firefox and other browsers.

hr {
    -moz-box-sizing: content-box;
    box-sizing: content-box;
    height: 0;
}

// Address styling not present in IE 8/9.

mark {
    background: #ff0;
    color: #000;
}

// Correct font family set oddly in Safari 5 and Chrome.

code,
kbd,
pre,
samp {
    font-family: monospace, serif;
    font-size: 1em;
}

// Improve readability of pre-formatted text in all browsers.

pre {
    white-space: pre-wrap;
}

// Set consistent quote types.

q {
    quotes: "\201C" "\201D" "\2018" "\2019";
}

// Address inconsistent and variable font size in all browsers.

small {
    font-size: 80%;
}

// Prevent `sub` and `sup` affecting `line-height` in all browsers.

sub,
sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
}

sup {
    top: -0.5em;
}

sub {
    bottom: -0.25em;
}

// -----------------------------------------------------------------------------
// Embedded content
// -----------------------------------------------------------------------------

// Remove border when inside `a` element in IE 8/9.

img {
    border: 0;
}

// Correct overflow displayed oddly in IE 9.

svg:not(:root) {
    overflow: hidden;
}

// -----------------------------------------------------------------------------
// Figures
// -----------------------------------------------------------------------------

// Address margin not present in IE 8/9 and Safari 5.

figure {
    margin: 0;
}

// -----------------------------------------------------------------------------
// Tables
// -----------------------------------------------------------------------------

// Remove most spacing between table cells.

table {
    border-collapse: collapse;
    border-spacing: 0;
}


// -----------------------------------------------------------------------------
// Positioning - Absolute, Floating and Clearfixing
// -----------------------------------------------------------------------------

%relative   { position: relative; }
%absolute   { position: absolute; }

.absolute   { @extend %absolute; }
.relative   { @extend %relative; }

.left       { float:left; }
.right      { float:right; }


    .absolute--bottom-left {
        @extend %absolute;
        bottom:0;
        left:0;
    }

    .absolute--bottom-right {
        @extend %absolute;
        bottom:0;
        right:0;
    }

    .absolute--top-left {
        @extend %absolute;
        top:0;
        left:0;
    }

    .absolute--top-right {
        @extend %absolute;
        top:0;
        right:0;
    }

%center-element {
    margin-left:auto;
    margin-right:auto;
}


// Vertical alignment utilities

%align--top {
    vertical-align: top ;
}

%align--middle {
    vertical-align: middle;
}

%align--baseline {
    vertical-align: baseline;
}

%align--bottom {
    vertical-align: bottom;
}


.align--top {
    @extend %align--top;
}

.align--middle {
    @extend %align--middle;
}

.align--baseline {
    @extend %align--baseline;
}

.align--bottom {
    @extend %align--bottom;
}

// -----------------------------------------------------------------------------
// Inline block
// -----------------------------------------------------------------------------
// zoom fix for IE6/7 so they correctly display inline-block elements
// (forces hasLayout)

/**
### Inline blocks

Inline blocks are handy for everything. We don't often support projects in IE7 and
below, but since it's trivial to hack it in, we've included it here. 

To cut down on rules in your stylesheet, you can extend this placeholder in your code.

```
%inline-block {
    display: inline-block;
    *display: inline;
    *zoom: 1;
}


.my-icon {
    @extend %inline-block;
}

```

*/

%inline-block {
    display: inline-block;
    *display: inline;
    *zoom: 1;
}

.inline-block { @extend %inline-block; }
.block-element { display: block; }

%border {
    border-width: 1px;
    border-style: solid;
}


/**
### Clearfixing

Table-pseudo element clearfix. It is good.

```scss
.my-floater {
    @extend %clearfix;
}
```

Or, heaven forbid, in your markup:

```html
<div class='clearfix'>
    <div class='left'>
        Hey i'm floating!
    </div>
</div>
```

*/

%clearfix{
    /**
     * For IE 6/7 only
     * Include this rule to trigger hasLayout and contain floats.
     */
    *zoom: 1;
}

%clearfix:before {
    content: " "; /* 1 */
    display: table; /* 2 */
}

%clearfix:after {
    clear: both;
    content: " "; /* 1 */
    display: table; /* 2 */
}

.clearfix           { @extend %clearfix; }
.overflow-hidden    { overflow: hidden; }



/**

###Screen reader content

We've found some odd bugs with the -999px textindent hack. 
Clipping is much better since it doesn't require a 999 x [your-line-height]px region to be drawn.

This is borrowed from Bootstrap.

```html
 <a class="sr-only" href="#content">Skip to main content</a>
```

*/

.sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0,0,0,0);
    border: 0;
}

// -----------------------------------------------------------------------------
// Fix webkit bug
// -----------------------------------------------------------------------------


/**

### Fixing Chrome/WebKit type rendering

Since v22, Chrome makes fat sausage horrible web typography. Fix it with
these properties right here:

```html
<div class='my-black-box antialiased'>
    <h1>Knocked out white text!</h1>  
</div>
```

But wait! That screws with everything on Windows Vista Chrome... right?

Yeah, it does. If you're using our [Browser.js](http://springload.github.io/Browser.js),
it'll automatically add `isWindowsChrome` to the documentElement, and we set
the antialiasing back to classic sub-pixel mode:

```scss
.isWindowsChrome %fix-webkit-font-rendering  {
    -webkit-font-smoothing: subpixel-antialiased;
}
```

In your markup:
```html
<html class='isWindowsChrome'>

<!-- some time later -->

<div class='my-black-box antialiased'>
    <h1>Hey i'll look good on Vista!</h1>  
</div>

```
*/

%fix-webkit-font-rendering {
    -webkit-font-smoothing: antialiased;
    text-rendering: optimizeLegibility;

}

.isWindowsChrome %fix-webkit-font-rendering  {
    -webkit-font-smoothing: subpixel-antialiased;
}

.antialiased {
    @extend %fix-webkit-font-rendering;
}


/**
### Magic tricks

Showing and hiding things with a pre-emptive `important`  

```html
<div class='hide'>Shorthand display: none !important;</div>
<div class='show'>Shorthand display: block !important;</div>
<div class='hidden'>Shorthand visibility: hidden !important;</div>
<div class='visible'>Shorthand visibility: visible !important;</div>
```

*/


%hide { display: none !important; }
%show { display: block !important; }

.hide { @extend %hide; }
.show { @extend %show; }

%visible    {visibility: visible !important;}
%hidden     {visibility: hidden !important;}
.visible    { @extend %visible; }
.hidden     { @extend %hidden; }

/**

### Append and Prepend

Place something before or after an element

```html
<p class="prepend" data-prepend="email:">&nbsp;email@gmail.com</p>
<p class="append" data-append="is my email">email@gmail.com&nbsp;</p>
```

*/

.prepend{
    &:before{
        content: attr(data-prepend);
        display: inline-block;
    }
}

.append{
    &:after{
        content: attr(data-append);
        display: inline-block;
    }
}

/**

That wraps up the core of Fred. Some simple resets, helpers, and alignment classes. 

---

# Modules

Modules are intended as stand-alone functional blocks that you can optionally include
in your build. We usually include all modules for development, then re-build the 
library with only components we've used in production.


By default, Fred will build and include all the following modules. 

*/
/**

## Arrows

Apply the modifier classes to the parent. For instance, this will put an
arrow in the top left corner of the containing div:

```html
<div class='arrow--left block-xs block--color-3'>
    <p> ... </p>
    <i class='arrow arrow-top'></i>
</div>

<div class='arrow--right block-xs block--color-3'>
    <p> ... </p>
    <i class='arrow arrow-top '></i>
</div>

<div class='arrow--center block-xs block--color-3'>
    <p> ... </p>
    <i class='arrow arrow-bottom '></i>
</div>

<div class='arrow--side block-xs block--color-3'>
    <p> ... </p>
    <i class='arrow arrow-left '></i>
</div>
```

*/

.arrow {/*i,span*/
    @extend %inline-block; // This extend is found in core
    @extend %absolute; // This extend is found in core
    border-color: transparent;
    border-style: solid;
    border-width: .5em;
    height: 0;
    width: 0;
}

    .arrow-top {
        border-bottom-color: inherit;
        border-top-width: 0;
        top: -.4em;
    }

    .arrow-bottom {
        border-bottom-width: 0;
        border-top-color: inherit;
        bottom: -.4em;
    }

    .arrow-left {
        border-left-width: 0;
        border-right-color: inherit;
        left: -.4em;
    }

    .arrow-right {
        border-left-color: inherit;
        border-right-width: 0;
        right: -.4em;
    }

.arrow--left,
.arrow--right,
.arrow--side,
.arrow--center {/*div,block*/
    @extend %relative;
}

    .arrow--center .arrow {
        @extend %center-element;
        left:0;
        right:0;

    }

    .arrow--left .arrow {
        left: $base-spacing-unit;
    }

    .arrow--right .arrow {
        right: $base-spacing-unit;
    }

    .arrow--side .arrow {
        top: $base-spacing-unit;
    }

/**

## Badges

```html
<a class="xm">Inbox
    <span class="badge tiny">42</span>
</a>
```
*/

.badge {
    @extend %inline-block; /* This extend is found in core */
    @extend %align--baseline; /* This extend is found in core */
    @extend %relative;/* This extend is found in core */
    line-height: $base-line-height;
    margin-left:0.3em;
    min-width: .625em;
    padding: .1875em .4375em;
    // Quick fix for labels/badges in buttons
    top: -1px;
    text-align: center;
    white-space: nowrap;
    color: $badge-font-color;
    background-color: $badge-bg-color;
    border-radius: 100px;
    // Empty badges collapse automatically (not available in IE8)
    &:empty {
        display: none;
    }
}

// Block grid
// ----------------------------------------------------------------------------
// A grid of items that reflow as the browser size changes.

.block-grid {

}

    .block-grid > * {

    }

    .block-grid:after {

    }


/**

## Generic blocks

```html
<div class='block-xs block--green'>
       ...
</div>
```

*/

// making sure the first element has no margin on it
%block {
    @extend .clearfix; /* This extend is found in core */
    margin-top:1em;
}

.block--stacked {
   //only use this id we don't want a top margin on it
   margin-top:0!important;
}

    .block-xxxs,
    .block-xxs,
    .block-xs,
    .block-s,
    .block-m,
    .block-l,
    .block-xl,
    .block-xxl,
    .block-xxxl {
        @extend %block;
        > :first-child {
            margin-top:0;
        }
    }



@each $breakpoint in $fred-block-breakpoints {
    @include media($breakpoint) {
        @include fred-sizer("block", $blockPrefixes, $breakpoint, "padding", $blockSizes);
    }
}

/**

## Breadcrumbs

```html
<ol class='list-unstyled breadcrumbs pt-breadrumbs mt-s'>
    <li><a href='#'>Home</a></li>
    <li><a href='#'>Page</a></li>
    <li class='#'>Sub page</li>
</ol>
```

*/

// Unicode space added since inline-block means non-collapsing white-space
.breadcrumbs {
    > li {
        @extend %inline-block; /* This extend is found in core */
        &+li:before {
            content: "/\00a0";
            padding: 0 $bs-xxxs;
        }
    }
}

.breadcrumbs--arrow {
    > li {
        @extend %inline-block; /* This extend is found in core */
        &+li:before {
            content: "» ";
            padding: 0 $bs-xxxs;
        }
    }
}
/**

## Button group

Contain buttons in a horizontal group.
----------------------------------------------------------------------------
Borrowed from Twitter Bootstrap and put on a border-radius diet.

*/


// Make the div behave like a button
.btn-group,
.btn-group-vertical {
    @extend %relative; //in core
    @extend %inline-block; //in core
    @extend %align--middle;// in core. This match .btn alignment given font-size hack above

    > .btn {
        @extend %relative; //in core
        @extend .left; //in core
        // Bring the "active" button to the front
        &:hover,
        &:focus,
        &:active,
        &.active {
            z-index: 2;
        }
        &:focus {
            // Remove focus outline when dropdown JS adds it after closing the menu
            outline: none;
        }
    }
}

// Prevent double borders when buttons are next to each other
.btn-group {
    .btn + .btn,
    .btn + .btn-group,
    .btn-group + .btn,
    .btn-group + .btn-group {
        margin-left: -1px;
    }
}

// Optional: Group multiple button groups together for a toolbar
.btn-toolbar {
    @extend %clearfix;

    .btn-group {
        @extend .left; //in core
    }
    // Space out series of button groups
    > .btn,
    > .btn-group {
        + .btn,
        + .btn-group {
            margin-left: .3125em;
        }
    }
}

.btn-group > .btn:not(:first-child):not(:last-child):not(.dropdown-toggle) {
    border-radius: 0;
}

// Set corners individual because sometimes a single button can be in a .btn-group and we need :first-child and :last-child to both match
.btn-group > .btn:first-child {
    margin-left: 0;
    &:not(:last-child) {
//        @include vendor(border-right-radius, 0);
    }
}
// Need .dropdown-toggle since :last-child doesn't apply given a .dropdown-menu immediately after it
.btn-group > .btn:last-child:not(:first-child),
.btn-group > .dropdown-toggle:not(:first-child) {
//    .border-left-radius(0);
}

// Custom edits for including btn-groups within btn-groups (useful for including dropdown buttons within a btn-group)
.btn-group > .btn-group {
    @extend .left; /* This extend is found in core */
}
.btn-group > .btn-group:not(:first-child):not(:last-child) > .btn {
    border-radius: 0;
}
.btn-group > .btn-group:first-child {
    > .btn:last-child {
//        @include vendor(border-right-radius, 0);
    }
}
.btn-group > .btn-group:last-child > .btn:first-child {
//    @include vendor(border-left-radius, 0);
}



// Sizing
//
// Remix the default button sizing classes into new ones for easier manipulation.

.btn-group-xs > .btn { font-size: pxem($font-size-xxs); }
.btn-group-sm > .btn { font-size: pxem($font-size-m); }
.btn-group-lg > .btn { font-size: pxem($font-size-l); }


// Vertical button groups
// ----------------------

.btn-group-vertical {
    > .btn,
    > .btn-group {
        display: block;
        float: none;
        width: 100%;
        max-width: 100%;
    }

    // Clear floats so dropdown menus can be properly placed
    > .btn-group {
        @extend %clearfix;
        > .btn {
            float: none;
        }
    }

    > .btn + .btn,
    > .btn + .btn-group,
    > .btn-group + .btn,
    > .btn-group + .btn-group {
        margin-top: -1px;
        margin-left: 0;
    }
}

// Justified button groups
// -----------------------

.btn-group-justified {
    display: table;
    width: 100%;
    table-layout: fixed;
    border-collapse: separate;
    .btn {
        float: none;
        display: table-cell;
        width: 1%;
    }
}
/**

## Buttons

### Button variations

```html
<p>
    <a class="btn tp-btn" data-btn-loading-indicator="Thinking...">
        <span class="btn--label">
            Button 1
        </span>
    </a>
    <a class="btn ts-btn">
        Button 2
    </a>
    <a class="btn tt-btn">
        Button 3
    </a>
</p>
```

*/

// -----------------------------------------------------------------------------
// 1. Allow us to better style box model properties.
// 2. Line different sized buttons up a little nicer.
// 3. Stop buttons wrapping and looking broken.
// 4. Make buttons inherit font styles.
// 5. Force all elements using buttons to appear clickable.
// 6. Normalise box model styles.
// 7. If the button’s text is 1em, and the button is (2.5 * font-size) tall, then
//    there is 1em of space above and below that text. We therefore apply 1em
//    of space to the left and right, as padding, to keep consistent spacing.
// 8. Basic cosmetics for default buttons. Change or override at will.
// 9. Don’t allow buttons to have underlines; it kinda ruins the illusion.

.btn {
    @extend %inline-block;                          /* [1] */
    @extend %align--middle;                         /* [2] */
    //@extend .user-select-none;
    @include vendor(border-radius, $base-spacing-unit/4);
    border-color: transparent;
    border-style: solid;
    border-width: 1px;
    cursor: pointer;                                /* [5] */
    font-family: inherit;                           /* [4] */
    line-height: 2.5;                               /* [7] */
    margin: inherit 0 0 0;                          /* [6] */
    padding-bottom: 0;                              /* [6] */
    padding-left: $base-spacing-unit;               /* [7] */
    padding-right: $base-spacing-unit;              /* [7] */
    padding-top: 0;                                 /* [6] */
    white-space: nowrap;                            /* [3] */

    &,
    &:hover {
        text-decoration:none;   /* [9] */
    }

    &:active,
    &:focus {
        outline:none;
    }
}

/**

### Button modifiers

```html
<h3 class="btn tp-btn btn--large btn--bounce">
    Button 1
</h3>
<p>
    <small class="btn tt-btn btn--small btn--bob">
        Button 2
    </small>
</p>
```

*/

.btn--large,
.btn--icon-large,
.btn--icon-large--rev,
.btn--icon-only--large {
    line-height: 3.5;         
}

.btn--large {
    padding-right: $base-spacing-unit * 2;          
    padding-left: $base-spacing-unit * 2;  
}

.btn--small,
.btn--icon-small,
.btn--icon-small--rev,
.btn--icon-only--small {
    line-height: 2;   
}

.btn--small {
    padding-right: $base-spacing-unit / 2;          
    padding-left: $base-spacing-unit / 2;  
}

/**

### Pill type buttons with (rounded) ends

```html
<a class="btn tp-btn btn--soft">
    Button 1
</a>
<a class="btn ts-btn btn--hard">
    Button 2
</a>
```

*/

.btn--soft {
    @include vendor(border-radius, 200px);
}

.btn--hard {
    @include vendor(border-radius, 0);
}


/**

### Block buttons stretch to the full width of their parent (handy!)

```html
<p>
    <a class="btn tp-btn btn--block">
        Button 1
    </a>
</p>
<p>
    <a class="btn tp-btn btn--block-mobile">
        Responsinate!
    </a>
</p>
```

*/

.btn--block {
    display: block;
    text-align: center;
}

// Make a button behave like a block at mobile only (also handy)
@media only screen and ($breakpoint-small-max) {
    .btn--block-mobile {
        text-align: center;
        display: block;
    }
}

/**

### Submit buttons

FireFox doesn't like line-heights on submit buttons. Stick a class on submit
buttons and make sure the padding's the same as your default button :)

```html
<input type='submit' value='Button 3' class='btn btn--submit-small' />
<input type='submit' value='Button' class='btn btn--submit' />
<input type='submit' value='Button 2' class='btn btn--submit-large' />
```

*/

.btn--submit {
    line-height: 1;
    padding-top: $base-spacing-unit / 2;
    padding-bottom: $base-spacing-unit / 2;
}

.btn--submit-large {
    line-height: 1;
    padding-top: $base-spacing-unit;
    padding-bottom: $base-spacing-unit;
}

.btn--submit-small {
    line-height: 1;
    padding-top: $base-spacing-unit / 4;
    padding-bottom: $base-spacing-unit / 4;
}


/**

### Buttons with icons

These assume there's an inline-block element with a class of .i inside the button

```html
<p>
    <a class='btn tp-btn btn--icon btn--bounce-icon--left'>
        <i class='i'>&#9834;</i>
        A button with .btn--icon
    </a>
</p>
<p>
    <a class='btn tp-btn btn--icon--rev btn--bounce-icon--bottom'>
        A button with .btn--icon--rev
        <i class='i'>&#9835;</i>
    </a>
</p>
<p>
    <a class='btn ts-btn btn--icon-large btn--bounce-icon--top'>
        <i class='i'>&#9829;</i>
        A button with .btn--icon-large
    </a>
</p>
<p>
    <a class='btn ts-btn btn--icon-large--rev btn--bounce-icon--right'>
        A button with .btn--icon-large--rev
        <i class='i'>&#9733;</i>
    </a>
</p>

<p>
    <a class='btn tt-btn btn--icon-small'>
        <i class='i'>&#163;</i>
        A button with .btn--icon-small
    </a>
</p>
<p>
    <small class='btn tt-btn btn--icon-small'>
        <i class='i'>&#163;</i>
        A small with .btn--icon-small
    </small>
</p>
```

Buttons can also be icons only:

```html
<p>
    <a class='btn tp-btn btn--icon-only--large'>
        <i class='i'>
            &#9829;
        </i>
    </a>
    <a class='btn ts-btn btn--icon-only'>
        <i class='i'>
            &#9829;
        </i>
    </a>
    <a class='btn tt-btn btn--icon-only--small'>
        <i class='i'>
            &#9829;
        </i>
    </a>
    <a class='btn ts-btn btn--icon-only--small btn--soft'>
        <i class='i'>
            &#9733;
        </i>
    </a>
    <a class='btn tp-btn btn--icon-only--small btn--hard'>
        <i class='i'>
            &#9834;
        </i>
    </a>
</p>
```

*/

.btn--icon-only,
.btn--icon-only--small,
.btn--icon-only--large {
    text-align: center;
    min-width: 1em;
}
.btn--icon-only {
    padding-left: $base-spacing-unit / 1.6;
    padding-right: $base-spacing-unit / 1.6;
}

.btn--icon-only--small {
    padding-left: $base-spacing-unit / 2.5;
    padding-right: $base-spacing-unit / 2.5;
}

.btn--icon-only--large {
    padding-left: $base-spacing-unit / .9;
    padding-right: $base-spacing-unit / .9;
}


.btn--icon {
    padding-left: $base-spacing-unit/2;
    & > .i {
        margin-right: $base-spacing-unit / 2;
    } 
}

.btn--icon--rev {
    padding-right: $base-spacing-unit/2;
    & > .i {
        margin-left: $base-spacing-unit / 2;
    } 
}

.btn--icon-large {
    padding-left: $base-spacing-unit;
    padding-right: $base-spacing-unit * 2;
    & > .i {
        margin-right: $base-spacing-unit / 2;
    } 
}

.btn--icon-large--rev {
    padding-left: $base-spacing-unit * 2;
    padding-right: $base-spacing-unit;
    & > .i {
        margin-left: $base-spacing-unit / 2;
    } 
}

.btn--icon-small {
    padding-left: $base-spacing-unit / 3;
    padding-right: $base-spacing-unit / 2; 
    & > .i {
        margin-right: $base-spacing-unit / 4;
    }
}

.btn--icon-small--rev {
    padding-left: $base-spacing-unit / 2;
    padding-right: $base-spacing-unit / 4;
    & > .i {
        margin-left: $base-spacing-unit / 2;
    }
}


// ----------------------------------------------------------------------------
// Button behaviors
// ----------------------------------------------------------------------------


// Simple bounces
// ----------------------------------------------------------------------------

.btn--bounce,
.btn--bob {
    position: relative;
    @include vendor(transition, bottom 100ms ease-out);
}

    .btn--bounce:active {
        bottom: -2px;
    }

    .btn--bob:active {
        bottom: -1px;
    }


// Bounce the icon to a side

.btn--bounce-icon--right .i,
.btn--bounce-icon--left .i,
.btn--bounce-icon--bottom .i,
.btn--bounce-icon--top .i {
    position: relative;
    @include vendor(transition-timing-function, cubic-bezier(0.165, 0.840, 0.440, 1.000));
    @include vendor(transition-duration, 300ms);
}

    .btn--bounce-icon--right:hover .i {
        @include vendor(transition-property, left);
        left: .3125em;
    }

    .btn--bounce-icon--left:hover .i {
        @include vendor(transition-property, right);
        right: .3125em;
    }

    .btn--bounce-icon--bottom:hover .i {
        @include vendor(transition-property, top);
        top: .3125em;
    }

    .btn--bounce-icon--top:hover .i {
        @include vendor(transition-property, bottom);
        bottom: .3125em;
    }


// Inset buttons on block level elements
// ----------------------------------------------------------------------------

.btn--inset {
    position: relative;

}
    .btn--inset:after {
        position: absolute;
        top: 0;
        left: 0;
        bottom: 0;
        right: 0;
        visibility: hidden;
        @include vendor(transition, border-width 100ms ease-out, visibility 100ms);
        content: " ";
        display: block;
        border-width: 0;
        border-color: inherit;
        border-style: solid;
    }
    .btn--inset:hover:after {
        border-width: 4px;
        visibility: visible;
    }
    .btn--inset-primary:after {
        border-color: #3977B1;
    }
    .btn--inset-secondary:after {
        border-color: #eb3930;
    }
    .btn--inset-large:hover:after {
        border-width: 8px;
    }
    .btn--inset-small:hover:after {
        border-width: 1px;
    }

// Buttons that show a loading indicator when clicked
// ----------------------------------------------------------------------------

.btn--spinner {
    position: relative;
    cursor: default;
}

    .btn--spinner .btn--label {
        opacity: 0;
        visibility: hidden;
    }

    .btn--spinner:after {
        position: absolute;
        top: 0;
        left: 0;
        display: inline-block;
        content: url('../images/spinner.png');
        text-align: center;
        margin-left: auto;
        margin-right: auto;
        width: 100%;
    }
    .btn--spinner--text:after {
        content: attr(data-btn-loading-indicator);
    }
/**

## Drop-down caret

```html
<p>
    Caret: <span class="caret"></span>
</p>
<p>
    Reversed Caret: <span class="caret caret--rev"></span>
</p>
```


*/

.caret {
    @extend %inline-block; /* This extend is found in core */
    @extend %align--middle; /* This extend is found in core */
    border-bottom: 0 dotted;
    border-left: .25em solid transparent;
    border-right: .25em solid transparent;
    border-top: .25em solid #000;
    height: 0;
    margin-left: .125em;
    width: 0;
}

.caret--rev {
    border-bottom: .25em solid #000;
    border-top: 0 dotted;
}
/**

## Close icon

```html
Close icon: <span class="close"></span>
```

*/

.close {
    padding: 0;
    cursor: pointer;
    background: transparent;
    border: 0;
    -webkit-appearance: none;
}

    .close:after {
        @extend %inline-block; /* This extend is found in core */
        @extend %align--middle; /* This extend is found in core */
        content: "\00d7";
        font-size: 1.5em;
        line-height: 0;
        opacity: 0.2;
        
    }

    .close:hover:after {
        opacity: 1;
    }


// Form helpers
// ----------------------------------------------------------------------------



// Define consistent border, margin, and padding.


fieldset {
    border: 1px solid #c0c0c0;
    margin: 0 2px;
    padding: 0.35em 0.625em 0.75em;
}

// 1. Correct `color` not being inherited in IE 8/9.
// 2. Remove padding so people aren't caught out if they zero out fieldsets.

legend {
    border: 0; /* 1 */
    padding: 0; /* 2 */
}


// 1. Correct font family not being inherited in all browsers.
// 2. Correct font size not being inherited in all browsers.
// 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.

button,
input,
select,
textarea {
    font-family: inherit; /* 1 */
    font-size: 100%; /* 2 */
    margin: 0; /* 3 */
}


// Address Firefox 4+ setting `line-height` on `input` using `!important` in
// the UA stylesheet.

button,
input {
    line-height: normal;
}


// Address inconsistent `text-transform` inheritance for `button` and `select`.
// All other form control elements do not inherit `text-transform` values.
// Correct `button` style inheritance in Chrome, Safari 5+, and IE 8+.
// Correct `select` style inheritance in Firefox 4+ and Opera.

button,
select {
    text-transform: none;
}


// 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
//    and `video` controls.
// 2. Correct inability to style clickable `input` types in iOS.
// 3. Improve usability and consistency of cursor style between image-type
//    `input` and others.

button,
html input[type="button"], /* 1 */
input[type="reset"],
input[type="submit"] {
    -webkit-appearance: button; /* 2 */
    cursor: pointer; /* 3 */
}


// Re-set default cursor for disabled elements.


button[disabled],
html input[disabled] {
    cursor: default;
}


// 1. Address box sizing set to `content-box` in IE 8/9/10.
// 2. Remove excess padding in IE 8/9/10.

input[type="checkbox"],
input[type="radio"] {
    box-sizing: border-box; /* 1 */
    padding: 0; /* 2 */
}


// 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
// 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
//    (include `-moz` to future-proof).

input[type="search"] {
    -webkit-appearance: textfield; /* 1 */
    -moz-box-sizing: content-box;
    -webkit-box-sizing: content-box; /* 2 */
    box-sizing: content-box;
}


// Remove inner padding and search cancel button in Safari 5 and Chrome
// on OS X.

input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
    -webkit-appearance: none;
}

// Remove inner padding and border in Firefox 4+.

button::-moz-focus-inner,
input::-moz-focus-inner {
    border: 0;
    padding: 0;
}

// 1. Remove default vertical scrollbar in IE 8/9.
// 2. Improve readability and alignment in all browsers.

textarea {
    overflow: auto; /* 1 */
    vertical-align: top; /* 2 */
}
/**

## Grids

###  Inline Grid
Sets the child elements to take up full justified width of the parent.
The prefix class is 'col' (although you can change this in the variables file) and the suffix is the fraction you require.

```html
<div class='grid'>
    <div class='grid__item col'>
       <div class='block--color-2 block-s'>
            <p>
                full width
            </p>
        </div>
    </div>
</div>

Example two
<div class='grid'>
    <div class='grid__item col-2-4' >
        <div class='block--color-3 block-s'>
            <p>
                50%
            </p>
        </div>
    </div>
    <div class='grid__item col-2-4'>
        <div class='block--color-3 block-s'>
            <p>
                50%
            </p>
        </div>
    </div>
</div>

Example three
<div class='grid'>
    <div class='grid__item col-1-4'>
        <div class='block--color-1 block-s'>
            <p>
                25%
            </p>
        </div>
    </div>
    <div class='grid__item col-1-4'>
        <div class='block--color-1 block-s'>
            <p>
                25%
            </p>
        </div>
    </div>
    <div class='grid__item col-1-4 '>
        <div class='block--color-1 block-s'>
            <p>
                25%
            </p>
        </div>
    </div>
    <div class='grid__item col-1-4 '>
        <div class='block--color-1 block-s'>
            <p>
                25%
            </p>
        </div>
    </div>
</div>

Example four
<div class='grid'>
    <div class='grid__item col-6-10'>
        <div class='ts-block block-s'>
            <p>
                60%
            </p>
        </div>
    </div>
    <div class='grid__item col-4-10'>
        <div class='ts-block block-s'>
            <p>
                40%
            </p>
        </div>
    </div>
</div>

Example five
<div class='grid'>
    <div class='grid__item col-8-10'>
        <div class='tt-block block-s'>
            <p>
                80%
            </p>
        </div>
    </div>
    <div class='grid__item col-2-10'>
        <div class='tt-block block-s'>
            <p>
                20%
            </p>
        </div>
    </div>
</div>

Vertical align these grid items in the middle
<div class='grid grid--middle'>
    <div class='grid__item col-1-4'>
        <div class='block-xxxl block--color-1 pl-s'>
            <p>
                1/4
            </p>
        </div>
    </div>
    <div class='grid__item col-1-4'>
        <div class='block-xl block--color-1 pl-s'>
            <p>
                1/4
            </p>
        </div>
    </div>
    <div class='grid__item col-1-4'>
        <div class='block-m block--color-1 pl-s'>
            <p>
                1/4
            </p>
        </div>
    </div>
    <div class='grid__item col-1-4'>
       <div class='block-xs block--color-1 pl-s'>
            <p>
                1/4
            </p>
        </div>
    </div>
</div>
```


#### Inline Grid - Responsive

This works exactly the same as what's mentioned above.
You just need to add an extra suffix onto the classes which relates to the breakpoint you want to target.

```html
<div class='grid'>
    <div class='grid__item col col-2-4--q-medium col-1-4--q-large col-4-10--q-xlarge'>
       <div class='block--color-2 block-s'>
            <p>
                1<br />
                <strong>Mobile:</strong> full width<br />
                <strong>Skinny:</strong> 1/2 <br />
                <strong>Desktop:</strong> 1/4 <br />
                <strong>Wide:</strong> 40/60
           </p>
        </div>
    </div>
    <div class='grid__item col col-2-4--q-medium col-1-4--q-large col-6-10--q-xlarge'>
       <div class='block--color-2 block-s'>
            <p>
                2
            </p>
        </div>
    </div>
    <div class='grid__item col col-2-4--q-medium col-1-4--q-large col-4-10--q-xlarge'>
       <div class='block--color-2 block-s'>
            <p>
                3
            </p>
        </div>
    </div>
    <div class='grid__item col col-2-4--q-medium col-1-4--q-large col-6-10--q-xlarge'>
       <div class='block--color-2 block-s'>
            <p>
                4
            </p>
        </div>
    </div>
</div>
```


#### Responsive Grid with pre-defined number of equally sized columns

```html
<div class='grid text-left grid--2-col grid--4-col--q-medium grid--6-col--q-large'>
    <div class='grid__item'>
       <div class='block--color-2 block-s'>
            <p>
                1
           </p>
        </div>
    </div>
    <div class='grid__item'>
       <div class='block--color-1 block-s'>
            <p>
                2
            </p>
        </div>
    </div>
    <div class='grid__item'>
       <div class='block--color-3 block-s'>
            <p>
                3
            </p>
        </div>
    </div>
    <div class='grid__item'>
       <div class='block--color-2 block-s'>
            <p>
                4
            </p>
        </div>
    </div>
    <div class='grid__item'>
       <div class='block--color-1 block-s'>
            <p>
                5
            </p>
        </div>
    </div>
    <div class='grid__item'>
       <div class='block--color-3 block-s'>
            <p>
                6
            </p>
        </div>
    </div>
</div>
```

*/

// Inline block grid
// -----------------------------------------------------------------------------
// [1] Sets the child elements to take up full justified width of the parent
// [2] Overcomes an issue where the :after element blows out the bottom.
// [3] A fix for Internet Explorer 8/9

 .grid {
    font-size: 0;                           /* [2] */
    text-align: justify;                    /* [1] */
    // text-justify: distribute-all-lines;  /* [3] */

    // Not sure if we need the last line as it stuffs up text align:center
    .ie8 & {
        // This fixes and issue mentioned above
        text-justify:normal;
    }
}

    // Font-size medium reset the block to the context of body (ie, 16px)
    .grid > *,
    .grid__item {
        @extend %inline-block; // This extend is found in core
        @extend %align--top; // This extend is found in core
        @extend .text-left; // This extend is found in core
        font-size: medium;

    }


    .grid:after,
    .grid__break {
        @extend %inline-block; // This extend is found in core
        content: '';
        height: 0;
        width:100%;
    }


    // Vertical align these grid items in the middle!

    .grid--middle > .grid__item {
        @extend %align--middle; // This extend is found in core
    }

    .grid--bottom > .grid__item {
        @extend %align--bottom; // This extend is found in core
    }



/**

### Float Grid

Sometimes you don't want an inline block grid, you want a float grid.
Fred doesn't mind what grid you use :).

```html
<div class='grid-float'>
    <div class='col-1-3 '>
        <div class='ts-block'>
            ...
        </div>
    </div>
    <div class='col-1-3 '>
        <div class='ts-block'>
            ...
        </div>
    </div>
    <div class='col-1-3 '>
        <div class='ts-block'>
            ...
        </div>
    </div>
</div>
```

*/


.grid-float {
    width: 100%;
}

    .grid-float:after {
        content: "";
        display: table;
        clear: both;
    }

    .grid-float > [class^=#{quote($grid-column-name)}] {
        @extend .left; //in core
    }



// Print grid classnames

.#{$grid-column-name} {
    width: 100%;
}


// Print column widths via a handy mixin.

@mixin grid-columns($name: $grid-column-name, $stops: 10, $fractional: false, $breakpointSuffix: false) {
    @for $i from 1 to $stops {
        $colName: $i;
        $width: $i / $stops * 100;
        @if $fractional {
            $colName: #{$i + "-"  + $stops};
        }
        @if $breakpointSuffix {
            $colName: #{$colName + $breakpointSuffix};
        }
        .#{$name}-#{$colName} {
            width: #{$width + "%"};
        }
    }
}

@each $breakpoint in $fred-grid-breakpoints {
    @if $breakpoint == "default" {
        @each $division in $grid-divisions {
            @include grid-columns($stops: $division, $fractional: true);
        }
    } @else {
        @include media($breakpoint) {
            $suffix: $breakpoint-classname-prefix + $breakpoint;
            @each $division in $grid-divisions {
                @include grid-columns($name: $grid-column-name, $stops: $division, $fractional: true, $breakpointSuffix: $suffix);
            }
            .#{$grid-column-name + "-auto" + $suffix} {
                width: auto;
            }
            .#{$grid-column-name + $suffix} {
                width: 100%;
            }
        }
    }
}


// Responsive grid lists

@mixin grid-list-columns($columns: 4, $breakpointSuffix: false) {
    $prefix: grid;
    $colName: #{"-"+$columns+"-"+$grid-column-name};
    // subtract column margins from total available width
    $colMargin: .04;
    $width: ( 1 - ( ($columns - 1) * $colMargin ) ) / $columns * 100;
    @if $breakpointSuffix {
        $colName: #{$colName + $breakpointSuffix};
    }
    .#{$prefix}-#{$colName} > * {
        width: #{$width + "%"};
    }
    .#{$prefix}-#{$colName} > *  {
        margin-right: #{ ($colMargin * 100) + "%"};
    }
    .#{$prefix}-#{$colName} > *:nth-child(#{$columns}n) {
        margin-right: 0;
    }
}

@each $breakpoint in $fred-grid-breakpoints {
    @if $breakpoint == "default" {
        @each $division in $grid-number-columns {
            @include grid-list-columns($columns: $division);
        }
    } @else {
        @include media($breakpoint) {
            $suffix: $breakpoint-classname-prefix + $breakpoint;
            @each $division in $grid-number-columns {
                @include grid-list-columns($columns: $division, $breakpointSuffix: $suffix);
            }
        }
    }
}

/*

## Headings

```html
<h1 class="heading heading--keyline mt-m">
    Heading
    <span class="heading__subheading tiny text-muted">
        Sub heading
    </span>
</h1>

<h2 class="heading heading--keyline">
    H2 Heading
    <span class="heading__subheading tiny text-muted">
        Sub heading
    </span>
</h2>

<h3 class="heading heading--keyline">
    H3 Heading
    <span class="heading__subheading tiny text-muted">
        Sub heading
    </span>
</h3>

<h4 class="heading heading--keyline">
    H4 Heading
    <span class="heading__subheading tiny text-muted">
        Sub heading
    </span>
</h4>
```

*/
 
.heading {
    > :first-child {
        margin-top:0;
    }
}

    .heading--keyline {
        padding-bottom: $bs-xxs;
        border-bottom-width:1px; 
        border-bottom-style:solid;

    }

    .heading__subheading {
        font-weight: normal;
    }
/**

## Icons with text

```html
<p>
    <a class='icon-text ' href='#'>
        <i class='i icon-placeholder'></i>
        A link with an icon
    </a>
</p>

<p class='icon-text--rev' href=''>
    A paragraph with an icon on the other side
    <i class='i icon-placeholder '></i>
</p>
```

*/

//.icon-text,
//.icon-text--rev{/* a, div, etc */
//    @extend %inline-block; /* This extend is found in core */
//}

.i{
    @extend %align--middle; //in core 
    overflow: hidden; /* for IE6 */
    // SMACSS line-height: 0; ?
    .icon-text &,
    .btn--icon & {
        margin-right: $base-spacing-unit/3;
        @extend %inline-block; /* This extend is found in core */
    }

    .icon-text--rev &,
    .btn--icon-rev &{
        margin-left: $base-spacing-unit/3;
        @extend %inline-block; /* This extend is found in core */
    }
}

/**

## Responsive images

This applies max-width: 100%; and height: auto; to the image so that it scales nicely to the parent element.

```html
<div class='grid'>
    <div class='grid__item col-1-4' >
        <img src='assets/images/fred-logo.png' alt='' class='img--responsive' />
    </div>
    <div class='grid__item col-2-3'>
        <div class='arrow--side block--color-3 block-m'>
            <p>Resize the browser so you can see me shrink </p>
            <i class='arrow arrow-left'></i>
        </div>
    </div>
</div>
```

*/

.img--responsive {
    height: auto;
    width: 100%;
}

// Use a massive em value, good for circles up to 960px wide
.img--round {
    @include vendor(border-radius, 30em);
}

/**

## Links/Anchors

```html
<p>
    <a href='' class='clean-link'>
        I'm a clean link look at me
    </a>
</p>
<p>
    <a href='' class='is-disabled'>
        I'm a disabled link
    </a>
</p>
<p>
    <a href='' class='is-draggable'>
        I'm a draggable link
    </a>
</p>

<ul class='list-styled clean-link-list'>
    <li>
        <a href=''>
            Clean link in a list
        </a>
    </li>
    <li>
        <a href=''>
            Clean link in a list
        </a>
    </li>
</ul>
```

*/

// A link without any text-decoration at all.
%clean-link {
    &:hover,
    &:active,
    &:focus {
        text-decoration: none;
    }
    text-decoration: none;
}


// A link with out any text decoration
.clean-link {
    @extend %clean-link;
}


// A list without any text decoration commonly used in vertical navigation lists
.clean-link-list a {
   @extend %clean-link;
}

// Link states
// http://www.thecssninja.com/javascript/pointer-events-60fps
.is-disabled,
.is-disabled * {
    cursor: default;
    pointer-events: none !important;
}

.is-draggable {
    cursor: move;
}

a[rel~="external"]:before {
    //add an image so we can add in a external image icon
}

//TODO: add in a pdf link
/**

## Lists

### Un styled list

```html
<ul class='list-unstyled mt-s'>
    <li>
        unstyled list item 1
    </li>
    <li>
        unstyled list item 2
    </li>
</ul>
```

### Styled list

```html
<ul class='list-styled'>
    <li>
        Styled list item 1
    </li>
    <li>
        Styled list item 2
    </li>
</ul>
<hr />
<ul class='list-styled--alpha'>
    <li>
        Styled list item 1
    </li>
    <li>
        Styled list item 2
    </li>
</ul>
<hr />
<ul class='list-styled--dashed'>
    <li>
        Styled list item 1
    </li>
    <li>
        Styled list item 2
    </li>
</ul>
<hr />
<ul class='list-styled--decimal'>
    <li>
        Styled list item 1
    </li>
    <li>
        Styled list item 2
    </li>
</ul>
```

### Inline list

```html
<ul class='list--inline'>
    <li> inline list item 1 </li>
    <li> inline list item 2 </li>
<ul>
```

*/

.list-unstyled {
    list-style: none;
    margin-bottom: 0;
    padding-left: 0;
}

    .list-unstyled > li {
        list-style: none;
//        margin: 0;    // There isn't usually a margin set on li's...
    }

    .list--inline {
        @extend .clearfix; /* This extend is found in core */
        @extend .list-unstyled; 
    }

    .list--inline > li {
        @extend %inline-block; /* This extend is found in core */
        margin: 0;
    }

//default list style in this case its circles
%list-styled {
    margin-top: $bs-xs; //same as the margin top on p tags
    padding-left: $bs-m;
}


.list-styled {
    @extend %list-styled;
    list-style: circle;
}

    //decimal list
    .list-styled--decimal,
    .list-decimal {
        @extend %list-styled;
        list-style: decimal-leading-zero;
        padding-left: $bs-l;
    }

    //alpha list
    .list-styled--alpha,
    .list-alpha {
        @extend %list-styled;
        list-style: lower-alpha;
    }


.list-dashed {
    margin-left: 1em;
    margin-top: 0;
    @extend %list-styled;

    & > li {
        text-indent: -0.5em;

        & > * {
            text-indent: 0;
        }

        &:before {
            content:"\2013";
            position:relative;
            left:-0.5em;
        }
    }
}

.list-plain {
    margin-top: $bs-xs;
    list-style: none;
    margin-bottom: 0;
    padding-left: 0;
}


/**

### Block list

Throws a list into a vertical stack. Handy for things like navigation.


*/
.block-list {
    @extend .list-unstyled;
    > li {
        display: block;
    }
}


/**

### Definition lists __Fred is stil working on this__

Defaults to being stacked without any of the below styles applied

```html
<dl>
    <dt>Description 1</dt>
    <dd>Info</dd>
    <dt>Description 2</dt>
    <dd>Info</dd>
</dl>
```

*/

dl {
    @extend .mt-m;
}
    dt,
    dd {
        line-height: $line-height-xs;
    }
    dt {
        font-weight: bold;
    }
    dd {
      margin-left: 0; // Undo browser default
    }

// TODO !
/**

### Horizontal descrption list

To make the description list horizontal apply the class 'dl-horizontal' aswell the fraction ...

```html
<dl class='dl-horizontal dl-horizontal--1-4 '>
    <dt>Description 1</dt>
    <dd>Info</dd>
    <dt>Description 2</dt>
    <dd>Info</dd>
</dl>

<hr class='mt-m'/>

<dl class='dl-horizontal dl-horizontal--1-3 '>
    <dt>Description 1</dt>
    <dd>Info</dd>
    <dt>Description 2</dt>
    <dd>Info</dd>
</dl>

<hr class='mt-m'/>

<dl class='dl-horizontal dl-horizontal--1-2 '>
    <dt>Description 1</dt>
    <dd>Info</dd>
    <dt>Description 2</dt>
    <dd>Info</dd>
</dl>
```
*/

.dl-horizontal {
    margin:0;
    font-size: 0;                       /* [2] */
    text-align: justify;                /* [1] */
   
    .ie8 & {
        // This fixes and issue mentioned above
        text-justify:normal;
    }
    > dt, 
    > dd {
        @extend .inline-block; // This extend is found in core
        @extend %align--top; // This extend is found in core
        font-size: medium;
    }
    // think about breaking this up so its not always like this
    > dt { text-align: right; }
    > dd { text-align: left; }
}

    .dl-horizontal:after {
        @extend %inline-block; // This extend is found in core
        content: '';
        height: 0;
        width:100%;
    }
    
    .dl-horizontal--dt-left {
        > dt { text-align: left; }
        > dd { text-align: left; }
    }

    .dl-horizontal--split {
        > dt { text-align: left; }
        > dd { text-align: right; }
    }


    .dl-horizontal--1-4 {
        > dt { width:24%; }
        > dd { width:74%; }
    }

    .dl-horizontal--1-3 {
        > dt { width:32%; }
        > dd { width:65%; }
    }

    .dl-horizontal--1-2 {
        > dt { width:49%; }
        > dd { width:49%; }
    }


/**

## Media blocks

Float an image to the left, with a clearfixed block of content to the right.

```html
<div class='media'>
    <img src='assets/images/green-bird.jpg' class='media__image'>
    <div class='media__body'>
        <p class='mt-0'>
            Uncle Bully was pashing when the pearler packing a sad event occured. Oh no! I'm beached as, this carked it seabed is as stoked as a flat stick kumara. Mean while, in a waka, Rhys Darby and Cardigan Bay were up to no good with a bunch of random milks.
        </p>
    </div>
</div>
<hr class='mt-m' />
<div class='media--rev'>
    <img src='assets/images/green-bird.jpg' class='media__image'>
    <div class='media__body'>
       <p class=''>
        I'd slam that clam, good afterble constanoon. The snarky force of his burning my Vogel's was on par with Hercules Morse, as big as a horse's good as mate.
        </p>
    </div>
</div>
```

*/

.media {
    @extend %clearfix;
    margin-top: $base-spacing-unit;
}

    .media__image{
        @extend .left;
        margin-right:$base-spacing-unit;
    }

    .media__body{
        @extend .overflow-hidden;
    }

/* Swap the image to the right */
.media--rev {
    @extend %clearfix;
    margin-top: $base-spacing-unit;
}

    .media--rev > .media__image{
        @extend .right;
        margin-right:0;
        margin-left:$base-spacing-unit;
    }

    .media--rev > .media__body{
        @extend .overflow-hidden;
    }


/**

## Navigation

Turns a list into a horizontal block of inline-blocks;

```html
<ul class='nav'>
    <li class='active'>
        <a href='#'>
            active list item
        </a>
    </li>
    <li class=''>
        <a href='#'>
            list item
        </a>
    </li>
    <li class=''>
        <a href='#'>
            list item
        </a>
    </li>
    <li class=''>
        <a href='#'>
            list item
        </a>
    </li>
</ul>
```

*/

.nav { /* div */
    @extend .clearfix; /* This extend is found in core */
    list-style: none;
    margin-bottom: 0;
    margin-top: 0;
    padding-left: 0;
}

    .nav > li {
        @extend %inline-block; /* This extend is found in core */
        margin-top: 0;
    }


/**

### Sub navigation

```html
<dl class='sub-nav'>
    <dt>Filter:</dt>
    <dd class='active'><a href='#'>All</a></dd>
    <dd><a href='#'>Active</a></dd>
    <dd><a href='#'>Pending</a></dd>
    <dd><a href='#'>Suspended</a></dd>
</dl>
```

*/

.sub-nav {
    display: block;
    width: auto;
    overflow: hidden;
}

    .sub-nav > dt,
    .sub-nav > dd {
        float: left;
    }

    .sub-nav > dd {
        margin-left: $bs-xs;
    }


    .sub-nav > .active a {

    }
/**

## Pagination

```html
<ul class='pagination'>
    <li class='pagination__first'>
         <a href='#'>
            First
        </a>
    </li>
    <li class='pagination__prev'>
        <a href='#'></a>
    </li>
    <li class='pagination__current'>
        <a href='#'>
            1
        </a>
    </li>
    <li class='pagination__more'>
        <a href='#'></a>
    </li>
    <li>
        <a href="#">
            10
        </a>
    </li>
    <li class='pagination__next'>
        <a href='#'></a>
    </li>
    <li class='pagination__last'>
        <a href='/page/last'>
            Last
        </a>
    </li>
 </ul>
```

*/

.pagination {
    @extend .nav;
    // Remove whitespace caused by `inline-block`.
    letter-spacing: -0.31em;
    word-spacing: -0.43em;
}

    .pagination > li{
        @extend %inline-block; /* This extend is found in core */
        margin-top: 0;
        padding:$base-spacing-unit / 2;
        letter-spacing:normal;
        word-spacing:normal;
    }

        .pagination > li > a{
            padding:$base-spacing-unit / 2 $bs-0;
            margin:-$base-spacing-unit / 2 $bs-0;
        }

    .pagination__current {
        font-weight: bold;
    }

    .pagination__first > a:before,
    .pagination__last > a:before,
    .pagination__more > a:before {
        display: inline-block;
    }

    .pagination__last > a:after {
        content: "\203A";
    }

    .pagination__first > a:before {
        content: "\2039";
    }

    .pagination__more > a:before {
        content: "\2026";
    }



/*

## Pills

Pills have fully rounded ends, lozenges have only their corners rounded.

```html
<p>This <span class="pill">here</span> is a pill!</p>
<p>This <span class="lozenge">here</span> is a lozenge!</p>
```

*/

.pill {
    @extend %inline-block; /* This extend is found in core */

    // These numbers set in ems mean that, at its narrowest, a lozenge will be
    // the same width as the `line-height` set on the `html` element.
    // This allows us to use the `.loz` in almost any `font-size` we wish.

    min-width:    ($base-line-height * 0.666667) * 1em;
    padding-right:($base-line-height * 0.166667) * 1em;
    padding-left: ($base-line-height * 0.166667) * 1em;
    /* =1.50em */
    text-align:center;

    color: $pill-font-color;
    background-color: $pill-bg-color;

    // Normally we’d use border-radius:100%; but instead here we just use an
    // overly large number; `border-radius:100%;` would create an oval on
    // non-square elements whereas we just want to round the ends of an element.

    border-radius:100px;
}

.lozenge {
    @extend .pill;
    border-radius: 0.25em;
}
/**

## Radii

```html
<div class='block--color-3 block-xs radius-s'>
    Check out my corners
</div>
<div class='block--color-3 block-xs radius'>
    Check out my corners
</div>
<div class='block--color-3 block-xs radius-l'>
    Check out my corners
</div>
<div class='block--color-3 block-xs circle'>
    I'm nearly a circle, wohoo
</div>
```

*/


// Border radii
@if $radius-s {
    .radius-s {
        @include vendor(border-radius, 2px 2px 2px 2px);
    }
}

@if $radius {
    .radius {
        @include vendor(border-radius, 5px 5px 5px 5px);
    }
}

@if $radius-l {
    .radius-l {
        @include vendor(border-radius, 10px 10px 10px 10px);
    }
}

@if $radius-circle {
    .circle {
        @include vendor(border-radius, 35em);
    }
}

/**

## Ratio boxes


   * .ratio-4-3
   * .ratio-16-9
   * .ratio-3-4
   * .ratio-2-1


This box will be 16:9

```html
<div class='ratio-16-9 block--color-3'>
    <div class='ratio__content'></div>
</div>
```

This box will be a square

```html
<div class='ratio-square block--color-3'>
    <div class='ratio__content'></div>
</div>
```

*/

%ratio {
    overflow: hidden;
    position: relative;
}

%ratio:before {
    content: "";
    display: block;
    height: 0;
    padding-top: 100%;
}

.ratio-square, .ratio-4-3, .ratio-16-9, .ratio-3-4, .ratio-2-1 {
    @extend %ratio;
}

.ratio-2-1:before {
    padding-top: 50%;
}

.ratio-4-3:before {
    padding-top: 75%;
}

.ratio-3-4:before {
    padding-top: 133.3333333%;
}

.ratio-16-9:before {
    padding-top: 56.25%;
}

    .ratio__content {
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
    }

// Margin and padding helpers
// ----------------------------------------------------------------------------
// These are provided after the core so they function as overrides
// to default values. The first kind of specificity is source order!

@include fred-breakpoint-sizer($fred-margin-breakpoints, $fred-margin-types);
@include fred-breakpoint-sizer($fred-padding-breakpoints, $fred-padding-types);



/**

## Split

Simple split item for creating two elements floated away from one another

```html
<p class='split'>
    Item
    <span class='split__right'>
        $value
    </span>
</p>
```
*/

.split {
    text-align:left;
    list-style:none;
    margin-left:0;
}
    .split__right {
        text-align:right;
        float:right;
        clear:left;
    }
/**

## Typography

*/


// By default, and set the line-height.

html,
body {
    font-size: 100%;
    line-height: $base-line-height;
}


// onMediaQuery sets the font-family on HTML, so declare your font-family
// on the body element instead.

body {
    @extend .font-primary;
}

/**

### Font declarations

```html
<p class="font-primary">This is the primary font</p>
<p class="font-primary--light">This is the primary font in light</p>
<p class="font-primary--bold">This is the primary font in bold</p>
<p class="font-size-xxxxl">Some huge text</p>
<p class="font-size-xxxs">Some tiny text</p>
```
*/


.font-primary {
    @include font($font-primary, $primary-font-weight , normal);
}
    .font-primary--light {
      @include font($font-primary-light, $primary-font-weight--light , normal);
      .ie8 & {
        font-family:$font-primary-light;
      }
    }

    .font-primary--light-italic {
      @include font($font-primary-light-italic, $primary-font-weight--light , italic);
      .ie8 & {
        font-family:$font-primary-light-italic;
      }
    }

    .font-primary--italic {
        @include font($font-primary-italic, $primary-font-weight , italic);
        .ie8 & {
            font-family:$font-primary-italic;
        }
    }

    .font-primary--bold {
        @include font($font-primary-bold, $primary-font-weight--bold , normal);
        .ie8 & {
            font-family:$font-primary-bold;
        }
    }

    .font-primary--bold-italic {
        @include font($font-primary-bold-italic, $primary-font-weight--bold , italic);
        .ie8 & {
            font-family:$font-primary-bold-italic;
        }
    }

.sans       { font-family:$sans-serif-stack; }
.serif      { font-family:$serif-stack; }

.font-size-xxxxl                { @include font-size($font-size-xxxxl); }
.font-size-xxxl                 { @include font-size($font-size-xxxl); }
.font-size-xxl                  { @include font-size($font-size-xxl); }
.font-size-xl                   { @include font-size($font-size-xl); }
.font-size-l                    { @include font-size($font-size-l); }
.font-size-m                    { @include font-size($font-size-m); }
.font-size-s                    { @include font-size($font-size-s); }
.font-size-xs                   { @include font-size($font-size-xs); }
.font-size-xxs                  { @include font-size($font-size-xxs); }
.font-size-xxxs                 { @include font-size($font-size-xxxs); }


// Headings
// ----------------------------------------------------------------------------

h1, h2, h3, h4, h5, h6, p, .text, li, code {
     @extend .mb-0;
    &:first-child {
        @extend .mt-0;
    }
}

/**

### Header styles

NOTE: These can change per project depending on what font etc you use :)

```html
<h1> H1 Heading 1 </h1>
<h1 class='h2'> H1 Heading with a class of H2 </h1>
<h2> H2 Heading </h2>
<h2 class='h4'> H2 Heading with a class of H4 </h2>
<h4 class='h4'> H4 Heading  </h4>
```

*/

.h0 {
    @extend .font-size-xxxxl;
}

h1, .h1 {
    @extend .font-size-xxxl;
    line-height: $line-height-xxxl;
    margin-top: pxem($base-spacing, $font-size-xxxl);
}

h2, .h2 {
    @extend .font-size-xxl;
    line-height: $line-height-xxl;
    margin-top: pxem($base-spacing, $font-size-xxl);
}

h3, .h3 {
    @extend .font-size-xl;
    line-height: $line-height-xl;
    margin-top: pxem($base-spacing, $font-size-xl);
}

h4, .h4 {
    @extend .font-size-l;
    line-height: $line-height-l;
    margin-top: px-to-em($base-spacing, $font-size-l);
}

h5, .h5 {
    @extend .font-size-m;
    line-height: $line-height-m;
    margin-top: px-to-em($base-spacing, $font-size-m);
}

h6, .h6 {
    @extend .font-size-s;
    line-height: $line-height-s;
    margin-top: px-to-em($base-spacing, $font-size-s);
}


p, .text, li, code, dt, dd {
    @extend .font-size-xs;
    line-height: $line-height-xs;
    margin-top: px-to-em($base-spacing--xs, $font-size-xs);
}

strong, b {
    .ie8 & {
        @extend .font-primary--bold;
    }
}

em, i {
    .ie8 & {
        @extend .font-primary--italic;
    }
}


/**

### Paragraph styles

```html
<p class="intro">I am an intro paragraph</p>
<p>I am a plain paragraph</p>
<p class="small">I am a small paragraph</p>
<p class="tiny">I am a tiny paragraph</p>
<p class="caption">I am a caption</p>
<p class="pullquote">I am a pullquote</p>

```

Also
* .text-muted
* .text-warning
* .text-success
* .text-danger

*/

.intro {
    @extend .font-size-s;
}

.small {
    @extend .font-size-xxs;
    line-height:$line-height-xxs;
}

.tiny {
    @extend .font-size-xxxs;
    line-height:$line-height-xxxs;
}

.caption {
    @extend .font-size-xxs;
}

.pullquote {
    @extend .font-size-m;
}

.text-muted {
    color: $text-muted;
}

.text-warning {
    color: $text-warning;
}

.text-success {
    color: $text-success;
}
.text-danger {
    color: $text-danger;
}


// hr
// ----------------------------------------------------------------------------

hr {
    border: none;
    height: 1px;
}


/**

### Text helpers

```html
<p class="uppercase">Uppercase</p>
<p class="lowercase">Lowercase</p>
<p class="text--overflow">These heading classes are helpful when you have a heading that is semantically correct but the default size is not what you are after.</p>

```

Also
* .text-left
* .text-right
* .text-center
* .text-nowrap

*/
.uppercase              { text-transform:uppercase; }
.lowercase              { text-transform:lowercase; }

.text-left              { text-align: left; }
.text-right             { text-align: right; }
.text-center            { text-align: center; }
.text-nowrap            { white-space: nowrap; }

.text--overflow {
    @extend %inline-block;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    width: 100%;
}

/**

### Blockquotes

```html
<div class="blockquote">
    <p class="lowercase">
        I'm a quote
    </p>
    <cite class='text-right block-element mt-s'>- Fred</cite>
</div>

```

*/
.blockquote, 
blockquote {
  
  text-indent:$block-quote-indent;

  p:before {
    content:"";
  }
  p:after{
    content:"";
  }
  p:first-of-type:before{
    content:"#{$open-quote}";
  }
  p:last-of-type:after{
    content:"#{$close-quote}";
  }

}




/**

## Visibility

### Hidden

Try to use these on a limited basis and avoid creating entirely different versions of the same site. Instead, use them to complement each device's presentation.

```html
<div class='block-s block--color-2 hidden--q-small'>
    hide this block on mobile
</div>
<div class='block-s block--color-1 hidden--q-medium'>
    hide this block on skinny
</div>
<div class='block-s tp-block hidden--q-medium-down'>
    hide this block skinny down
</div>
<div class='block-s block--color-3 hidden--q-medium-up'>
    hide this block on a medium screen, large screen and xlarge screen
</div>
<div class='block-s block--color-2 hidden--q-large'>
    hide this block on desktop
</div>
<div class='block-s ts-block hidden--q-large-up'>
    hide this block desktop up
</div>
<div class='block-s tt-block hidden--q-xlarge'>
    hide this block on wide
</div>
```

### Visibile

Try to use these on a limited basis and avoid creating entirely different versions of the same site. Instead, use them to complement each device's presentation.

```html
<div class='block-s block--color-2 visible--q-small'>
    show this block on small screen
</div>
<div class='block-s block--color-3 visible--q-medium'>
    show this block on a medium screen
</div>
<div class='block-s block--color-3 visible--q-medium-down'>
    Show this block on a medium screen and small screen
</div>
<div class='block-s block--color-2 visible--q-medium-up'>
    Show this block on a medium screen, large screen and xlarge screen
</div>
<div class='block-s tt-block visible--q-large'>
    Show this block on a large screen
</div>
<div class='block-s block--color-3 visible--q-large-up'>
    Show this block on a large and xlarge screen
</div>
<div class='block-s block--color-1 visible--q-xlarge'>
    show this block on a xlarge screen
</div>
```

*/





// Hide an element, but make it visible to screen readers
// ----------------------------------------------------------------------------

.visually-hidden {
    clip: rect(0 0 0 0);
    height: 1px; width: 1px;
    margin: -1px; padding: 0; border: 0;
    overflow: hidden;
    position: absolute;
}


// Hide an element
// ----------------------------------------------------------------------------

.hidden, .hide {
    display: none;
}


// Common visible and hidden classes
// ----------------------------------------------------------------------------

//Show / Hide this element on a small screen
@media only screen and (max-width: $breakpoint-small-max) {
    .visible--q-small {
        display:block;
        &.inline {
            display: inline;
        }
    }
    .visible--q-medium,
    .visible--q-large,
    .visible--q-xlarge {
        display: none;
    }
    .hidden--q-small {
        display: none !important;
    }

}

//Show / Hide this element on a medium screen
@media only screen and (min-width: $breakpoint-medium) and (max-width: $breakpoint-medium-max) {
    .visible--q-medium {
        display:block;
        &.inline {
            display: inline;
        }
    }
    .visible--q-small,
    .visible--q-large,
    .visible--q-xlarge {
        display: none;
    }
    .hidden--q-medium {
        display: none !important;
    }
}

//Show / Hide this element on a large screen
@media only screen and (min-width:$breakpoint-large) and (max-width: $breakpoint-large-max){

    .visible--q-large {
        display:block;
        &.inline {
            display: inline;
        }
    }
    .visible--q-small,
    .visible--q-medium,
    .visible--q-xlarge {
        display: none;
    }
    .hidden--q-large {
        display: none !important;
    }
}

//Show / Hide this element on a xlarge screen
@media only screen and (min-width: $breakpoint-xlarge) {

    .visible--q-xlarge {
        display:block;
        &.inline {
            display: inline;
        }
    }

    .visible--q-small,
    .visible--q-medium,
    .visible--q-large {
        display: none;
    }
    .hidden--q-xlarge {
        display: none !important;
    }
}

// or do you just include skinny and mobile classes class='visible--q-small visible--q-medium'

//Show / Hide this element on a small screen and down
@media only screen and (max-width: $breakpoint-small-max) {
    .visible--q-small-down {
        display: block;
        &.inline {
            display: inline;
        }
    }
    .visible--q-medium-up {
        display: none;
    }
    .hidden--q-small-down {
        display: none !important;
    }
}


//Show / Hide this element on a medium screen and down
@media only screen and (max-width: $breakpoint-medium-max) {
    .visible--q-medium-down {
        display: block;
        &.inline {
            display: inline;
        }
    }
    .visible--q-large-up {
        display: none;
    }
    .hidden--q-medium-down {
        display: none !important;
    }
}
//Show / Hide this element on a medium screen and up
@media only screen and (min-width: $breakpoint-medium) {
    .visible--q-medium-up {
        display: block;
        &.inline {
            display: inline;
        }
    }
    .visible--q-small-down {
        display: none;
    }
    .hidden--q-medium-up {
        display: none !important;
    }
}


//Show / Hide this element on a large screen and down
@media only screen and (max-width: $breakpoint-large-max ) {
    .visible--q-large-down {
        display: block;
        &.inline {
            display: inline;
        }
    }
    .hidden--q-large-down {
        display: none !important;
    }
}

//Show / Hide this element on a large screen and up
@media only screen and (min-width: $breakpoint-large ) {
    .visible--q-large-up {
        display: block;
        &.inline {
            display: inline;
        }
    }
    .visible--q-medium-down {
        display: none;
    }
    .hidden--q-large-up {
        display: none !important;
    }
}


//Show / Hide this element on a xlarge screen and up
@media only screen and (min-width: $breakpoint-xlarge ) {
    .visible--q-large-down {
        display: none;
    }
}
